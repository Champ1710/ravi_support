name: RUN-GTIS-App-Control-DEV

on:
  workflow_dispatch:
    inputs:
      server:
        description: "Input into build for variable(${server})"
        required: false
        default: "test-server"
      action:
        description: "Choose which remote script to run (startup or shutdown)"
        required: true
        default: "startup"
      vault-folder:
        description: "Vault environment folder"
        required: true
        default: "apps/sample-app"

permissions:
  actions: read
  id-token: write
  security-events: write
  contents: read

jobs:
  app-control:
    name: Run ${{ inputs.action }} script remotely
    runs-on: ubuntu-latest
    environment: devserver

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate with Vault
        id: vault-auth
        uses: hashicorp/vault-action@v2
        with:
          url: https://champ071hcp.org
          method: github
          role: github-actions-role
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Read SSH secrets from Vault
        id: vault-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://champ071hcp.org
          method: github
          role: github-actions-role
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          secrets: |
            products/${{ inputs.vault-folder }}/champ SSH_USER
            products/${{ inputs.vault-folder }}/Step1 SSH_KEY

      - name: Debug SSH Key Presence
        run: |
          if [ -z "${{ steps.vault-secrets.outputs.SSH_KEY }}" ]; then
            echo "❌ SSH_KEY is empty or not set"
            exit 1
          else
            echo "✅ SSH_KEY is present"
          fi

      - name: Set SSH Identity File
        run: |
          mkdir -p ~/.ssh
          echo "${{ steps.vault-secrets.outputs.SSH_KEY }}" | tr -d '\r' > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem
          echo "SSH_KEY=~/.ssh/private_key.pem" >> $GITHUB_ENV

      - name: Execute the script
        run: |
          export SSH_USER="${{ steps.vault-secrets.outputs.SSH_USER }}"
          export SERVER="${{ inputs.server }}"
          if [[ "${{ inputs.action }}" == "startup" ]]; then
            bash startup.sh
          elif [[ "${{ inputs.action }}" == "shutdown" ]]; then
            bash shutdown.sh
          else
            echo "Invalid action: ${{ inputs.action }}"
            exit 1
