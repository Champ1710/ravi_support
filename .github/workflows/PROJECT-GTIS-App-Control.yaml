name: PROJECT-GTIS-App-Control
env:
  GIT_SSL_NO_VERIFY: "true"

on:
  workflow_call:
    inputs:
      server:
        description: "Input into build for variable(s){{server}}"
        required: true
        type: string
      timeout:
        description: "Define the timeout for the ssh connection"
        required: false
        type: string
        default: "300"
      vault-folder:
        description: "Environment"
        required: true
        type: string
        default: "ngas-gtis/dev/ssh"
      ACTION:
        description: "startup or shutdown"
        required: true
        type: string

jobs:
  app-control:
    name: Run ${{ inputs.ACTION }} script remotely
    permissions:
      contents: read
      id-token: write
      actions: read
      security-events: write
    runs-on: ${{ vars.RUNNERSET_DEFAULT }}

    steps:
      - name: Get Secrets from Vault
        uses: dukeenergy-corp/duke-actions/composite/vault-fetch@master
        with:
          deploy-environment: products/${{ inputs.vault-folder }}
          secrets: |
            ssh USER | SSH_USER
            ssh KEY  | SSH_KEY

      - name: Debug SSH Key Presence
        run: |
          if [ -z "${{ env.SSH_KEY }}" ]; then
            echo "❌ SSH_KEY is empty or not set"
            exit 1
          else
            echo "✅ SSH_KEY is present"
          fi

      - name: Set SSH Identity File
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_KEY }}" | tr -d '\r' > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem
          echo "SSH_KEY=~/.ssh/private_key.pem" >> $GITHUB_ENV

      - name: Execute the script
        run: |
          export SSH_USER=${{ env.SSH_USER }}
          export SERVER=${{ inputs.server }}
          if [[ "${{ inputs.ACTION }}" == "startup" ]]; then
            bash startup.sh
          elif [[ "${{ inputs.ACTION }}" == "shutdown" ]]; then
            bash shutdown.sh
          else
            echo "Invalid action: ${{ inputs.ACTION }}"
            exit 1
          fi


 
